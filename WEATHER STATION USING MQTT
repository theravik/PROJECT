#include <ESP8266WiFi.h>
#include <Wire.h>
#include <PubSubClient.h>
#include <DHT.h>
#include <ThingSpeak.h>

#define DHTPIN 14 // digital pin (D5) = 14
#define DHTTYPE DHT11 // DHT 11

DHT dht(DHTPIN, DHTTYPE);

#define wifi_ssid "S20FE"
#define wifi_password "ivar0007"
#define mqtt_server "91.121.93.94"

#define humidity_topic "sensor/humidity"
#define temperature_topic "sensor/temperature"
#define heat_index_topic "sensor/heat_index"
#define rain_topic "sensor/rain"

WiFiClient espClient;
PubSubClient client(espClient);

long myChannelNumber = 2213813;
const char myWriteAPIKey[] = "5A4D9VAIFXTH13WC";

int t, h;
float r;

void callback(char* topic, byte* payload, unsigned int length) {
  Serial.print("Message arrived [");
  Serial.print(topic);
  Serial.print("] ");
  for (int i = 0; i < length; i++) {
    Serial.print((char)payload[i]);
  }
  Serial.println();

  // Switch on the LED if an 1 was received as first character
  if ((char)payload[0] == '1') {
    digitalWrite(BUILTIN_LED, LOW);   // Turn the LED on (Note that LOW is the voltage level
    // but actually the LED is on; this is because
    // it is active low on the ESP-01)
  } else {
    digitalWrite(BUILTIN_LED, HIGH);  // Turn the LED off by making the voltage HIGH
  }

}


void setup() {
  pinMode(BUILTIN_LED, OUTPUT);     // Initialize the BUILTIN_LED pin as an output
  Serial.begin(115200);
  dht.begin();
  ThingSpeak.begin(espClient);
  setup_wifi();
  client.setServer(mqtt_server, 1883);
  client.setCallback(callback);
}

String macToStr(const uint8_t* mac)
{
  String result;
  for (int i = 0; i < 6; ++i) {
    result += String(mac[i], 16);
    if (i < 5)
      result += ':';
  }
  return result;
}


void setup_wifi() {
  delay(10);
  // We start by connecting to a WiFi network
  Serial.println();
  Serial.print("Connecting to ");
  Serial.println(wifi_ssid);

  WiFi.begin(wifi_ssid, wifi_password);

  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }

  Serial.println("");
  Serial.println("WiFi connected");
  Serial.println("IP address: ");
  Serial.println(WiFi.localIP());
}

void reconnect() {
  // Loop until we're reconnected
  while (!client.connected()) {
        Serial.print("Attempting MQTT connection...");
    
          // Generate client name based on MAC address and last 8 bits of microsecond counter
      String clientName;  
      clientName += "esp8266-";
      uint8_t mac[6];
      WiFi.macAddress(mac);
      clientName += macToStr(mac);
      clientName += "-";
      clientName += String(micros() & 0xff, 16);
      Serial.print("Connecting to ");
      Serial.print(mqtt_server);
      Serial.print(" as ");
      Serial.println(clientName);


    // Attempt to connect
    // If you do not want to use a username and password, change next line to
  if (client.connect((char*) clientName.c_str())) {
    //if (client.connect((char*) clientName.c_str()), mqtt_user, mqtt_password)) {
      Serial.println("connected");
      client.subscribe("LED_topic");
    } else {
      Serial.print("failed, rc=");
      Serial.print(client.state());
      Serial.println(" try again in 5 seconds");
      // Wait 5 seconds before retrying
      delay(5000);
    }
  }
}


void loop() {
  
      if (!client.connected()) {
        reconnect();
      }
      client.loop();

      // Wait a few seconds between measurements.
     delay(2000);
      
      // Reading temperature or humidity takes about 250 milliseconds!
      // Sensor readings may also be up to 2 seconds 'old' (its a very slow sensor)
      h = dht.readHumidity();
      // Read temperature as Celsius (the default)
      t = dht.readTemperature();
      // Read temperature as Fahrenheit (isFahrenheit = true)
      float f = dht.readTemperature(true);
      
      // Check if any reads failed and exit early (to try again).
      if (isnan(h) || isnan(t) || isnan(f)) {
      Serial.println("Failed to read from DHT sensor!");
      return;
      }
      
      // Compute heat index in Fahrenheit (the default)
      float hif = dht.computeHeatIndex(f, h);
      // Compute heat index in Celsius (isFahreheit = false)
      float hic = dht.computeHeatIndex(t, h, false);

      // getting data from analog sensor
      r = map(analogRead(A0), 0, 1023, 100, 0);

      sendtothingspeak();
      Serial.print("Humidity: ");
      Serial.print(h);
      Serial.print(" %\t");
      Serial.print("Temperature: ");
      Serial.print(t);
      Serial.print(" *C /");
      Serial.print(f);
      Serial.print(" *F\t\t");
      Serial.print("Heat index: ");
      Serial.print(hic);
      Serial.print(" *C /");
      Serial.print(hif);
      Serial.print(" *F\t\t");
      Serial.print("Rain: ");
      Serial.print(r);
      if (r > 40){
        Serial.println("\tIt's raining...");
      }


      Serial.print("Temperature in Celsius: ");
      Serial.print(String(t).c_str());
      Serial.println(" *C");
      client.publish(temperature_topic, String(t).c_str(), true);

      Serial.print("Heat index: ");
      Serial.print(String(hic).c_str());
      Serial.println(" *C");
      client.publish(heat_index_topic, String(hic).c_str(), true);


      Serial.print("Humidity: ");
      Serial.print(String(h).c_str());
      Serial.println(" %");
      client.publish(humidity_topic, String(h).c_str(), true);
      

      Serial.print("Rain: ");
      Serial.println(String(r).c_str());
      client.publish(rain_topic, String(r).c_str(), true);

      Serial.println("-------------------------------------------------------------------------------");
}

void sendtothingspeak(){

        //sending data to ThinSpeak
      ThingSpeak.writeField(myChannelNumber, 1, t, myWriteAPIKey);
      ThingSpeak.writeField(myChannelNumber, 2, h, myWriteAPIKey);
      ThingSpeak.writeField(myChannelNumber, 3, r, myWriteAPIKey);
}
